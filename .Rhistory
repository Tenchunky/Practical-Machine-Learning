# Load libraries
library(caret)
# Set seed for reproducibility
set.seed(8872)
# Download data files if they do not exist
if(!file.exists("./pml-testing.csv")){
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "./pml-testing.csv")
}
if(!file.exists("./pml-training.csv")){
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "./pml-training.csv")
}
# Read data files
pml.testing <- read.csv("./pml-testing.csv", na.strings = c('NA','#DIV/0!',''))
pml.training <- read.csv("./pml-training.csv", na.strings = c('NA','#DIV/0!',''))
# Remove first 7 columns
pml.testing.clean <- pml.testing[,-c(1:7)]
pml.training.clean <- pml.training[,-c(1:7)]
# Remove columns that contain missing values (in training set)
colSums.na <- colSums(is.na(pml.training.clean))
pml.testing.clean <- pml.testing.clean[, colSums.na == 0]
pml.training.clean <- pml.training.clean[, colSums.na == 0]
# Split to training (60%), validation (40%) and testing sets
rows.training <- createDataPartition(y = pml.training.clean$classe, p = 0.6, list = FALSE)
training <- pml.training.clean[rows.training,]
validation <- pml.training.clean[-rows.training,]
testing <- pml.testing.clean
set.seed(8872)
modelFit3 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 3, allowParallel = TRUE))
set.seed(8872)
modelFit4 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE))
set.seed(8872)
modelFit5 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 5, allowParallel = TRUE))
set.seed(8872)
modelFit6 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 6, allowParallel = TRUE))
set.seed(8872)
modelFit7 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 7, allowParallel = TRUE))
set.seed(8872)
modelFit8 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 8, allowParallel = TRUE))
set.seed(8872)
modelFit9 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 9, allowParallel = TRUE))
set.seed(8872)
modelFit10 <- train(classe ~., data = training, method="rf",
trControl = trainControl(method = "cv", number = 10, allowParallel = TRUE))
validation.predict <- predict(modelFit3, validation)
confusionMatrix(validation.predict, validation$classe)
validation.predict <- predict(modelFit4, validation)
confusionMatrix(validation.predict, validation$classe)
validation.predict <- predict(modelFit5, validation)
confusionMatrix(validation.predict, validation$classe)
validation.predict <- predict(modelFit6, validation)
confusionMatrix(validation.predict, validation$classe)
validation.predict <- predict(modelFit7, validation)
confusionMatrix(validation.predict, validation$classe)
validation.predict <- predict(modelFit8, validation)
confusionMatrix(validation.predict, validation$classe)
validation.predict <- predict(modelFit4, validation)
confusionMatrix(validation.predict, validation$classe)
